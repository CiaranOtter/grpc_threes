// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package three

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ThreesClient is the client API for Threes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThreesClient interface {
	ConnectPlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error)
	GetCommand(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Makemove(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type threesClient struct {
	cc grpc.ClientConnInterface
}

func NewThreesClient(cc grpc.ClientConnInterface) ThreesClient {
	return &threesClient{cc}
}

func (c *threesClient) ConnectPlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/Threes/ConnectPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threesClient) GetCommand(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Threes/GetCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threesClient) Makemove(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Threes/Makemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThreesServer is the server API for Threes service.
// All implementations must embed UnimplementedThreesServer
// for forward compatibility
type ThreesServer interface {
	ConnectPlayer(context.Context, *Player) (*Player, error)
	GetCommand(context.Context, *Request) (*Response, error)
	Makemove(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedThreesServer()
}

// UnimplementedThreesServer must be embedded to have forward compatible implementations.
type UnimplementedThreesServer struct {
}

func (UnimplementedThreesServer) ConnectPlayer(context.Context, *Player) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectPlayer not implemented")
}
func (UnimplementedThreesServer) GetCommand(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommand not implemented")
}
func (UnimplementedThreesServer) Makemove(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Makemove not implemented")
}
func (UnimplementedThreesServer) mustEmbedUnimplementedThreesServer() {}

// UnsafeThreesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThreesServer will
// result in compilation errors.
type UnsafeThreesServer interface {
	mustEmbedUnimplementedThreesServer()
}

func RegisterThreesServer(s *grpc.Server, srv ThreesServer) {
	s.RegisterService(&_Threes_serviceDesc, srv)
}

func _Threes_ConnectPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreesServer).ConnectPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Threes/ConnectPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreesServer).ConnectPlayer(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threes_GetCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreesServer).GetCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Threes/GetCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreesServer).GetCommand(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threes_Makemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreesServer).Makemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Threes/Makemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreesServer).Makemove(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Threes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Threes",
	HandlerType: (*ThreesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectPlayer",
			Handler:    _Threes_ConnectPlayer_Handler,
		},
		{
			MethodName: "GetCommand",
			Handler:    _Threes_GetCommand_Handler,
		},
		{
			MethodName: "Makemove",
			Handler:    _Threes_Makemove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "threes.proto",
}
